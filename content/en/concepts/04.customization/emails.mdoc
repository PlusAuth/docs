---
title: "Emails"
meta_title: "Configure Emails"
meta_description: "Learn how to configure and customize emails in PlusAuth — a secure authentication and authorization platform."
keywords:
  - concepts
  - plusauth
  - email
  - customize email
---

PlusAuth allows you to fully customize the emails sent from your system. Multiple template engines are supported, so you can choose the one that best fits your needs.

## Configuring an Email Provider

To set up your email provider:

1. Navigate to [**Dashboard > Settings > Email Provider**](https://dashboard.plusauth.com/#settings/email-provider).
2. Select one of the available providers.
3. Enter the required configuration details for your chosen provider.

![Email Configuration](./assets/email-configuration.png)

## Customizing Email Templates

Every email used by PlusAuth can be tailored to match your branding and communication style. To edit a template:

1. Go to [**Dashboard > Customization > Email Templates**](https://dashboard.plusauth.com/#customization/email-templates).
2. Click on the template you want to customize.

PlusAuth uses [Twig](https://twig.symfony.com/doc/3.x/templates.html) as its templating engine.
We've prepared an [**Introductory Guide to Twig**](/concepts/customization/introduction-to-twig) to help you get started.

Both **From** and **Subject** fields support Twig syntax, meaning you can use dynamic variables in these fields as well.


### Preview and Variables

When editing a template:

- Switch to the **Preview** tab to see how your email will look.
- Use the **Edit preview variables** button above the editor to adjust test data.

{% alert type="warn" %}
These preview variables are only for testing. If you modify the keys of the preview JSON, they may not exist in real usage.
{% /alert %}


{% tabs %}
![Template Editor](./assets/email-template-screen.png "Email Template")
![Preview Mode](./assets/email-preview.png "Email Preview")
{% /tabs %}

### Available Variables
Each template may have a different set of variables.
You can find the list of variables for each template in their preview variables from dashboard.
The following variables are available for every template:

{% data-table
columns=["Key", "Description"]
data=[
{ key: "request.language"      , description: "Language parameter of request. See [Localization](#localizing-emails)"},
{ key: "application.name"      , description: "Initiating Client's name"},
{ key: "application.id"        , description: "Initiating Client's id"},
{ key: "application.metadata"  , description: "Initiating Client's metadata"},
{ key: "tenant.id"             , description: "Your tenant's id"},
{ key: "tenant.display_name"   , description: "Your tenant's display name"},
{ key: "user"                  , description: "Target user object. See [Reference](/api/core/-/users/get-user#response-body-schema) "}
]
/%}



### Localizing Emails
The most straightforward way to localize your emails is to use the `user.profile.locale` variable.

You can use the `request.language` variable to localize your email templates.
This variable contains the language code that represents the user's preferred language.

The value of `request.language` is determined from:

- **`X-Request-Language` header** – You can explicitly set this header to send a custom locale value.
- **[`Accept-Language`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header** – This header is sent automatically by browsers to indicate the user's preferred languages.

If both headers are present, `X-Request-Language` takes priority.
This allows you to override the browser's default language when needed.

The following template snippet checks the user's locale,
falling back to first locale defined at `request.language` if not set:

```twig {% process=false %}
{# Use the user's profile locale if available, otherwise take the first language from request.language #}
{% set locale = user.profile.locale ? user.profile.locale : (request.language | split(";") | at(0)) %}

{% if 'de' in locale %}
   Verfügbar
{% elseif 'tr' in locale %}
   Mevcut
{% else %}
   Available
{% endif %}
```
